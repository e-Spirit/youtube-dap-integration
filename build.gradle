/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/current/userguide/java_library_plugin.html
 */

buildscript {
    ext {
        fsRuntimeVersion = '5.2.201107'
        fsIsolationCheckVersion = '5.2.210309' // update regularly to test against newest FirstSpirit release
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'de.espirit.firstspirit-module' version '1.0.2'
    id 'de.espirit.firstspirit' version '1.0.10'
    id 'net.researchgate.release' version '2.8.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        //options.release.set(8)
    } else {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

group = project.property('groupId')

repositories {
    maven {
        url = 'https://artifactory.e-spirit.de/artifactory/repo/'
        credentials {
            username = artifactory_username
            password = artifactory_password
        }
    }
}

configurations {
    fsLicense
}

dependencies {
	fsModuleCompile group: 'com.espirit.ps.psci.module', name: 'generic-configuration', version: '2.8.0'
    fsWebCompile group: 'com.espirit.ps.psci.module', name: 'generic-configuration', version: '2.8.0'
    fsModuleCompile group: 'com.google.apis', name: 'google-api-services-youtube', version: 'v3-rev222-1.25.0'
    fsWebCompile group: 'com.google.apis', name: 'google-api-services-youtube', version: 'v3-rev222-1.25.0'
    fsProvidedCompile group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "${fsRuntimeVersion}"
    fsLicense group: 'de.espirit.firstspirit', name: 'fs-license', version: '5-SNAPSHOT', ext: 'conf'
}

/*
 * FirstSpirit Plugin (Integration Tests) configuration
 */

def serverHttpPort = 0
def serverSocketPort = 0

new ServerSocket(0).withCloseable {
    port1 -> serverHttpPort = port1.getLocalPort()
        new ServerSocket(0).withCloseable {
            port2 -> serverSocketPort = port2.getLocalPort()
        }
}

firstSpirit {
    version = "${fsRuntimeVersion}"
}

fsStartServer {
    serverConfiguration {
        httpPort = serverHttpPort
        socketPort = serverSocketPort
        licenseFile = configurations.fsLicense.resolve().first().absolutePath
    }
}

fsInstallModule {
    fsm = "${assembleFSM.destinationDirectory.file(assembleFSM.archiveFileName).get().asFile}"

    dependsOn assembleFSM, fsStartServer
}

task integrationTest() {
    group = 'verification'

    dependsOn fsStartServer, fsInstallModule
    finalizedBy fsStopServer
}

/*
 * FirstSpirit Module Plugin configuration
 */

firstSpiritModule {
    moduleName = project.property('firstSpiritModule.moduleName')
    displayName = project.property('firstSpiritModule.displayName')
    description = project.property('firstSpiritModule.description')
    vendor = project.property('firstSpiritModule.vendor')

    isolationDetectorUrl = 'https://fsdev.e-spirit.de/FsmDependencyDetector/'
    firstSpiritVersion = "${fsIsolationCheckVersion}"
    complianceLevel = 'MINIMAL'
}

/*
 * Maven Publish Plugin configuration
 */

publishing {
    repositories {
        maven {
            credentials {
                username = artifactory_username
                password = artifactory_password
            }
            url "https://artifactory.e-spirit.de/artifactory/${version.endsWith("SNAPSHOT") ? project.property('publishing.snapshotRepository') : project.property('publishing.releaseRepository') }"
        }
    }
    publications {
        fsm(MavenPublication) {
            artifactId project.name
            artifact assembleFSM
        }
    }
}

/*
 * Release Plugin configuration
 */

release {
    ignoredSnapshotDependencies = ['de.espirit.firstspirit:fs-license']
}

// publish artifacts after release
allprojects { p ->
    afterEvaluate {
        rootProject.afterReleaseBuild.dependsOn p.tasks.matching { it.name == 'publish' }
    }
}

/*
 * Verify gradle.properties values
 */

afterEvaluate {
    ['groupId', 'firstSpiritModule.moduleName', 'firstSpiritModule.displayName', 'firstSpiritModule.vendor' , 'publishing.releaseRepository', 'publishing.snapshotRepository'].each {
        if (!project.hasProperty(it) || (project.property(it) as String).trim().empty) {
            throw new GradleException("Property '${it}' in gradle.properties must not be empty!")
        }
    }
}
